// Breakpoints
@mixin media($minmax, $breakpoint) {
    @if ($minmax=='min') {
        @if (map-get($breakpoints, $breakpoint) != null) {
            $value: map-get($breakpoints, $breakpoint);
            @media screen and (min-width: $value) {
                @content;
            }
        }
        @else {
            $value: $breakpoint;
            @media screen and (min-width: $value) {
                @content;
            }
        }
    }
    @if ($minmax=='max') {
        @if (map-get($breakpoints, $breakpoint) != null) {
            $value: map-get($breakpoints, $breakpoint);
            $value-final: $value - 1px;
            @media screen and (max-width: $value-final) {
                @content;
            }
        }
        @else {
            $value: $breakpoint;
            @media screen and (max-width: $value) {
                @content;
            }
        }
    }
}

// Font
@mixin font($font: null, $size: null, $font-weight: null, $line-height: null) {
    font-family: $font;
    font-size: $size;
    font-weight: $font-weight;
    line-height: $line-height;
}

// Font-Face
@mixin font-face($font-name, $file-name, $weight: null, $style: null) {
    $file-name-url: '../fonts/' + $file-name;
    @font-face {
        font-family: quote($font-name);
        src: url($file-name-url + '.eot');
        src: url($file-name-url + '.eot?#iefix') format('embedded-opentype'),
        url($file-name-url + '.woff2') format('woff2'),
        url($file-name-url + '.woff') format('woff'),
        url($file-name-url + '.ttf') format('truetype'),
        url($file-name-url + '.svg##{$file-name}') format('svg');
        font-weight: $weight;
        font-style: $style;
    }
}

// Image
@mixin retina($image) {
    @media (min-device-pixel-ratio: 1.3), (min-resolution: 1.3dppx) {
        background-image: url($image);
    }
}


// Button
@mixin button($buttonColor, $textColor, $borderColor: null) {
    & {
        background: $buttonColor;
        color: $textColor;
        text-decoration: none;
            @if ($borderColor != null) {
            border-color: $borderColor;
        }
        &:hover, &:focus {
            background: darken($buttonColor, 20%);
            color: lighten($textColor, 20%);
            text-decoration: none;
            @if ($borderColor != null) {
                border-color: darken($borderColor, 20%);
            }
        }
    }
}

// Help
@mixin center-vertical {
    position: absolute;
    left: 50%;
    top: 50%;
    transform: translate(-50%, -50%);
}

@mixin center-horizontal {
    display: block;
    margin-left: auto;
    margin-right: auto;
}

@mixin clearfix {
    &:after {
        content: "";
        display: table;
        clear: both;
    }
}

@mixin triangle($direction, $size: 0.375rem, $color: #222) {
    content: '';
    display: block;
    position: absolute;
    height: 0;
    width: 0;
    @if ($direction=='up') {
        border-bottom: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction=='down') {
        border-top: $size solid $color;
        border-left: $size solid transparent;
        border-right: $size solid transparent;
    }
    @else if ($direction=='left') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-right: $size solid $color;
    }
    @else if ($direction=='right') {
        border-top: $size solid transparent;
        border-bottom: $size solid transparent;
        border-left: $size solid $color;
    }
}
